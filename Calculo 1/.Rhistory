?axis
axis(side = 4, c(seq(mini + 1, maxi - 1, 3)), pos = 0)
##  Curvas:
curve(f1, from = v[1], to = v[2], xlim = v, ylim = c(mini, maxi), lwd = 2,
bty = 'n', xaxt = 'n', yaxt = 'n', ylab = '', xlab = '',
main = 'Componentes da Inequação')
curve(f2, from = v[1], to = v[2], add = TRUE, col = 2, lwd = 2)
curve(g, from = v[1], to = v[2], add = TRUE, col = 3, lwd = 2)
##  Eixos:
arrows(x0 = v[1], x1 = v[2],
y0 = 0, y1 = 0, lwd = 2, length = 0.1)
arrows(x0 = 0, x1 = 0,
y0 = mini, y1 = maxi, lwd = 2, length = 0.1)
##  Comprimento da reta vertical que passa pelo ponto de intersecção:
const <- 1.5
minim <- min(f1(r), f2(r), g(r)) - const
maxim <- max(f1(r), f2(r), g(r)) + const
##  Reta vertical que passa pelo ponto de intersecção:
segments(x0 = r, x1 = r,
y0 = minim, y1 = maxim, lwd = 1)
##  Enumeração dos eixos:
axis(side = 1, c(seq(v[1] + 0.5, v[2] - 0.5, 1)), hadj = -0.5, padj = -1, pos = 0)
axis(side = 4, c(seq(mini + 1, maxi - 1, 3)), pos = 0)
##  Enumeração dos eixos:
axis(side = 1, c(seq(v[1] + 0.5, v[2] - 0.5, 1)), hadj = -0.25, padj = -1, pos = 0)
##  Curvas:
curve(f1, from = v[1], to = v[2], xlim = v, ylim = c(mini, maxi), lwd = 2,
bty = 'n', xaxt = 'n', yaxt = 'n', ylab = '', xlab = '',
main = 'Componentes da Inequação')
curve(f2, from = v[1], to = v[2], add = TRUE, col = 2, lwd = 2)
curve(f2, from = v[1], to = v[2], add = TRUE, col = 2, lwd = 2)
curve(g, from = v[1], to = v[2], add = TRUE, col = 3, lwd = 2)
##  Eixos:
arrows(x0 = v[1], x1 = v[2],
y0 = 0, y1 = 0, lwd = 2, length = 0.1)
##  Curvas:
curve(f1, from = v[1], to = v[2], xlim = v, ylim = c(mini, maxi), lwd = 2,
bty = 'n', xaxt = 'n', yaxt = 'n', ylab = '', xlab = '',
main = 'Componentes da Inequação')
##  Curvas:
curve(f1, from = v[1], to = v[2], xlim = v, ylim = c(mini, maxi), lwd = 2,
bty = 'n', xaxt = 'n', yaxt = 'n', ylab = '', xlab = '',
main = 'Componentes da Inequação')
curve(f2, from = v[1], to = v[2], add = TRUE, col = 2, lwd = 2)
##  Curvas:
curve(f1, from = v[1], to = v[2], xlim = v, ylim = c(mini, maxi), lwd = 2,
bty = 'n', xaxt = 'n', yaxt = 'n', ylab = '', xlab = '',
main = 'Componentes da Inequação')
##  Curvas:
curve(f1, from = v[1], to = v[2], xlim = v, ylim = c(mini, maxi), lwd = 2,
bty = 'n', xaxt = 'n', yaxt = 'n', ylab = '', xlab = '',
main = 'Componentes da Inequação')
curve(f2, from = v[1], to = v[2], add = TRUE, col = 2, lwd = 2)
curve(g, from = v[1], to = v[2], add = TRUE, col = 3, lwd = 2)
##  Eixos:
arrows(x0 = v[1], x1 = v[2],
y0 = 0, y1 = 0, lwd = 2, length = 0.1)
arrows(x0 = 0, x1 = 0,
y0 = mini, y1 = maxi, lwd = 2, length = 0.1)
##  Comprimento da reta vertical que passa pelo ponto de intersecção:
const <- 1.5
minim <- min(f1(r), f2(r), g(r)) - const
maxim <- max(f1(r), f2(r), g(r)) + const
##  Reta vertical que passa pelo ponto de intersecção:
segments(x0 = r, x1 = r,
y0 = minim, y1 = maxim, lwd = 1)
##  Enumeração dos eixos:
axis(side = 1, c(seq(v[1] + 0.5, v[2] - 0.5, 1)), hadj = -0.25, padj = -1, pos = 0)
axis(side = 4, c(seq(mini + 1, maxi - 1, 3)), pos = 0)
axis(side = 4, c(seq(mini + 1, maxi - 1, 5)), pos = 0)
##  Curvas:
curve(f1, from = v[1], to = v[2], xlim = v, ylim = c(mini, maxi), lwd = 2,
bty = 'n', xaxt = 'n', yaxt = 'n', ylab = '', xlab = '',
main = 'Componentes da Inequação')
curve(f2, from = v[1], to = v[2], add = TRUE, col = 2, lwd = 2)
curve(g, from = v[1], to = v[2], add = TRUE, col = 3, lwd = 2)
##  Eixos:
arrows(x0 = v[1], x1 = v[2],
y0 = 0, y1 = 0, lwd = 2, length = 0.1)
arrows(x0 = 0, x1 = 0,
y0 = mini, y1 = maxi, lwd = 2, length = 0.1)
##  Comprimento da reta vertical que passa pelo ponto de intersecção:
const <- 1.5
minim <- min(f1(r), f2(r), g(r)) - const
maxim <- max(f1(r), f2(r), g(r)) + const
##  Reta vertical que passa pelo ponto de intersecção:
segments(x0 = r, x1 = r,
y0 = minim, y1 = maxim, lwd = 1)
##  Enumeração dos eixos:
axis(side = 1, c(seq(v[1] + 0.5, v[2] - 0.5, 1)), hadj = -0.25, padj = -1, pos = 0)
axis(side = 4, c(seq(mini + 1, maxi - 1, 5)), pos = 0)
axis(side = 4, c(seq(mini + 1, maxi - 1, 3)), pos = 0)
axis(side = 4, c(seq(mini + 1, maxi - 1, 4)), pos = 0)
axis(side = 4, c(seq(mini + 1, maxi - 1, 2)), pos = 0)
axis(side = 4, c(seq(mini + 1, maxi - 1, 3)), pos = 0)
##  Curvas:
curve(f1, from = v[1], to = v[2], xlim = v, ylim = c(mini, maxi), lwd = 2,
bty = 'n', xaxt = 'n', yaxt = 'n', ylab = '', xlab = '',
main = 'Componentes da Inequação')
curve(f2, from = v[1], to = v[2], add = TRUE, col = 2, lwd = 2)
curve(g, from = v[1], to = v[2], add = TRUE, col = 3, lwd = 2)
##  Eixos:
arrows(x0 = v[1], x1 = v[2],
y0 = 0, y1 = 0, lwd = 2, length = 0.1)
arrows(x0 = 0, x1 = 0,
y0 = mini, y1 = maxi, lwd = 2, length = 0.1)
##  Comprimento da reta vertical que passa pelo ponto de intersecção:
const <- 1.5
minim <- min(f1(r), f2(r), g(r)) - const
maxim <- max(f1(r), f2(r), g(r)) + const
##  Reta vertical que passa pelo ponto de intersecção:
segments(x0 = r, x1 = r,
y0 = minim, y1 = maxim, lwd = 1)
##  Enumeração dos eixos:
axis(side = 1, c(seq(v[1] + 0.5, v[2] - 0.5, 1)), hadj = -0.25, padj = -1, pos = 0)
axis(side = 4, c(seq(mini + 1, maxi - 1, 3)), pos = 0)
##  Legenda:
legend(r + 0.5, -7, col = c(1, 2, 3), c('f1(x)', 'f2(x)', 'g(x)'),
lwd = 2, text.font = 2)
##  Curvas:
curve(f1, from = v[1], to = v[2], xlim = v, ylim = c(mini, maxi), lwd = 2,
bty = 'n', xaxt = 'n', yaxt = 'n', ylab = '', xlab = '',
main = 'Componentes da Inequação')
curve(f2, from = v[1], to = v[2], add = TRUE, col = 2, lwd = 2)
curve(g, from = v[1], to = v[2], add = TRUE, col = 3, lwd = 2)
##  Eixos:
arrows(x0 = v[1], x1 = v[2],
y0 = 0, y1 = 0, lwd = 2, length = 0.1)
arrows(x0 = 0, x1 = 0,
y0 = mini, y1 = maxi, lwd = 2, length = 0.1)
##  Comprimento da reta vertical que passa pelo ponto de intersecção:
const <- 1.5
minim <- min(f1(r), f2(r), g(r)) - const
maxim <- max(f1(r), f2(r), g(r)) + const
##  Reta vertical que passa pelo ponto de intersecção:
segments(x0 = r, x1 = r,
y0 = minim, y1 = maxim, lwd = 1)
##  Enumeração dos eixos:
axis(side = 1, c(seq(v[1] + 0.5, v[2] - 0.5, 1)), hadj = -0.25, padj = -1, pos = 0)
axis(side = 4, c(seq(mini + 1, maxi - 1, 3)), pos = 0)
##  Legenda:
legend(r + 0.5, -7, col = c(1, 2, 3), c('f1(x)', 'f2(x)', 'g(x)'),
lwd = 2, text.font = 2)
##  Para resolver a inequação pelo R consideraremos as seguintes expressões:
## 'f1(x) = x - 3' e 'f2(x) = 3x + 1'.
f1 <- function(x){
x - 3
}
f2 <- function(x){
3*x + 1
}
##  A desigualdade é 'f1(x) < f2(x)' logo 'f1(x) - f2(x) > 0'. Logo queremos os
## valores de x para os quais 'f1(x) - f2(x)' seja maior que zero.
##  Começaremos achando a raiz da expressão 'f1(x) - f2(x)'.
##  A função abaixo utiliza iterações para achar a raiz em um intervalo
## pré-determinado, utiliza-se aqui o intervalo (-10, 10) mas é possível inserir
## grandes intervalos a um certo custo de tempo computacional (neste caso
## razoável).
r <- uniroot(function(x){f1(x) - f2(x)}, c(-10, 10))$root
r
##  O resultado revela somente a raiz da função. No entanto queremos saber onde
## se localizam os valores positivos e negativos da função.
##  Chamaremos nessa etapa a expressão 'f1(x) - f2(x)' de 'g(x)'.
g <- function(x){
f1(x) - f2(x)
}
##  Sabemos que a raiz da função 'g(x)' é -2, logo basta verificarmos os
## valores ao redor da raiz.
x <- seq(from = -2.5, to = -1.5, by = 0.1)
data.frame(x, g(x))
##  Vetor para determinar a amplitude do eixo das abscissas:
v <- c(r - 3, r + 3)
##  Determina  a amplitude do eixo das ordenadas:
mini <- min(f1(v), f2(v), g(v))
maxi <- max(f1(v), f2(v), g(v))
##  Curvas:
curve(f1, from = v[1], to = v[2], xlim = v, ylim = c(mini, maxi), lwd = 2,
bty = 'n', xaxt = 'n', yaxt = 'n', ylab = '', xlab = '',
main = 'Componentes da Inequação')
curve(f2, from = v[1], to = v[2], add = TRUE, col = 2, lwd = 2)
curve(g, from = v[1], to = v[2], add = TRUE, col = 3, lwd = 2)
##  Eixos:
arrows(x0 = v[1], x1 = v[2],
y0 = 0, y1 = 0, lwd = 2, length = 0.1)
arrows(x0 = 0, x1 = 0,
y0 = mini, y1 = maxi, lwd = 2, length = 0.1)
##  Comprimento da reta vertical que passa pelo ponto de intersecção:
const <- 1.5
minim <- min(f1(r), f2(r), g(r)) - const
maxim <- max(f1(r), f2(r), g(r)) + const
##  Reta vertical que passa pelo ponto de intersecção:
segments(x0 = r, x1 = r,
y0 = minim, y1 = maxim, lwd = 1)
##  Enumeração dos eixos:
axis(side = 1, c(seq(v[1] + 0.5, v[2] - 0.5, 1)), hadj = -0.25, padj = -1, pos = 0)
axis(side = 4, c(seq(mini + 1, maxi - 1, 3)), pos = 0)
##  Legenda:
legend(r + 0.5, -7, col = c(1, 2, 3), c('f1(x)', 'f2(x)', 'g(x)'),
lwd = 2, text.font = 2)
text(x = c(v[2], -0.125, r), y = c(-1, maxi, maxim + 1),
labels = c("x", "y", "1.5"), font = 2)
?axis
##  Enumeração dos eixos:
axis(side = 1, c(seq(v[1] + 0.5, v[2] - 0.5, 1)),
hadj = -0.25, padj = -1, pos = 0, font = 1)
##  Curvas:
curve(f1, from = v[1], to = v[2], xlim = v, ylim = c(mini, maxi), lwd = 2,
bty = 'n', xaxt = 'n', yaxt = 'n', ylab = '', xlab = '',
main = 'Componentes da Inequação')
curve(f2, from = v[1], to = v[2], add = TRUE, col = 2, lwd = 2)
curve(g, from = v[1], to = v[2], add = TRUE, col = 3, lwd = 2)
##  Eixos:
arrows(x0 = v[1], x1 = v[2],
y0 = 0, y1 = 0, lwd = 2, length = 0.1)
arrows(x0 = 0, x1 = 0,
y0 = mini, y1 = maxi, lwd = 2, length = 0.1)
##  Comprimento da reta vertical que passa pelo ponto de intersecção:
const <- 1.5
minim <- min(f1(r), f2(r), g(r)) - const
maxim <- max(f1(r), f2(r), g(r)) + const
##  Reta vertical que passa pelo ponto de intersecção:
segments(x0 = r, x1 = r,
y0 = minim, y1 = maxim, lwd = 1)
##  Enumeração dos eixos:
axis(side = 1, c(seq(v[1] + 0.5, v[2] - 0.5, 1)), hadj = -0.25, padj = -1, pos = 0, font = 1)
axis(side = 4, c(seq(mini + 1, maxi - 1, 3)), pos = 0)
##  Enumeração dos eixos:
axis(side = 1, c(seq(v[1] + 0.5, v[2] - 0.5, 1)), hadj = -0.25, padj = -1, pos = 0, font = 2)
##  Enumeração dos eixos:
axis(side = 1, c(seq(v[1] + 0.5, v[2] - 0.5, 1)), hadj = -0.25, padj = -1, pos = 0, font = 3)
##  Eixos:
arrows(x0 = v[1], x1 = v[2],
y0 = 0, y1 = 0, lwd = 2, length = 0.1)
arrows(x0 = 0, x1 = 0,
y0 = mini, y1 = maxi, lwd = 2, length = 0.1)
##  Comprimento da reta vertical que passa pelo ponto de intersecção:
const <- 1.5
minim <- min(f1(r), f2(r), g(r)) - const
##  Curvas:
curve(f1, from = v[1], to = v[2], xlim = v, ylim = c(mini, maxi), lwd = 2,
bty = 'n', xaxt = 'n', yaxt = 'n', ylab = '', xlab = '',
main = 'Componentes da Inequação')
curve(f2, from = v[1], to = v[2], add = TRUE, col = 2, lwd = 2)
curve(g, from = v[1], to = v[2], add = TRUE, col = 3, lwd = 2)
##  Eixos:
arrows(x0 = v[1], x1 = v[2],
y0 = 0, y1 = 0, lwd = 2, length = 0.1)
arrows(x0 = 0, x1 = 0,
y0 = mini, y1 = maxi, lwd = 2, length = 0.1)
##  Comprimento da reta vertical que passa pelo ponto de intersecção:
const <- 1.5
minim <- min(f1(r), f2(r), g(r)) - const
maxim <- max(f1(r), f2(r), g(r)) + const
##  Reta vertical que passa pelo ponto de intersecção:
segments(x0 = r, x1 = r,
y0 = minim, y1 = maxim, lwd = 1)
##  Enumeração dos eixos:
axis(side = 1, c(seq(v[1] + 0.5, v[2] - 0.5, 1)), hadj = -0.25, padj = -1, pos = 0, font = 3)
axis(side = 4, c(seq(mini + 1, maxi - 1, 3)), pos = 0)
##  Enumeração dos eixos:
axis(side = 1, c(seq(v[1] + 0.5, v[2] - 0.5, 1)), hadj = -0.25, padj = -1, pos = 0, font = 4)
##  Enumeração dos eixos:
axis(side = 1, c(seq(v[1] + 0.5, v[2] - 0.5, 1)), hadj = -0.25, padj = -1, pos = 0, lwd.ticks = lwd)
##  Enumeração dos eixos:
axis(side = 1, c(seq(v[1] + 0.5, v[2] - 0.5, 1)), hadj = -0.25, padj = -1, pos = 0, lwd.ticks = 1)
##  Curvas:
curve(f1, from = v[1], to = v[2], xlim = v, ylim = c(mini, maxi), lwd = 2,
bty = 'n', xaxt = 'n', yaxt = 'n', ylab = '', xlab = '',
main = 'Componentes da Inequação')
curve(f2, from = v[1], to = v[2], add = TRUE, col = 2, lwd = 2)
curve(g, from = v[1], to = v[2], add = TRUE, col = 3, lwd = 2)
##  Eixos:
arrows(x0 = v[1], x1 = v[2],
y0 = 0, y1 = 0, lwd = 2, length = 0.1)
arrows(x0 = 0, x1 = 0,
y0 = mini, y1 = maxi, lwd = 2, length = 0.1)
##  Comprimento da reta vertical que passa pelo ponto de intersecção:
const <- 1.5
minim <- min(f1(r), f2(r), g(r)) - const
maxim <- max(f1(r), f2(r), g(r)) + const
##  Reta vertical que passa pelo ponto de intersecção:
segments(x0 = r, x1 = r,
y0 = minim, y1 = maxim, lwd = 1)
##  Enumeração dos eixos:
axis(side = 1, c(seq(v[1] + 0.5, v[2] - 0.5, 1)), hadj = -0.25, padj = -1, pos = 0, lwd.ticks = 1)
##  Enumeração dos eixos:
axis(side = 1, c(seq(v[1] + 0.5, v[2] - 0.5, 1)), hadj = -0.25, padj = -1, pos = 0, lwd.ticks = 4)
##  Enumeração dos eixos:
axis(side = 1, c(seq(v[1] + 0.5, v[2] - 0.5, 1)), hadj = -0.25, padj = -1, pos = 0, lwd.ticks = 10)
axis(side = 4, c(seq(mini + 1, maxi - 1, 3)), pos = 0, lwd = 0.01)
axis(side = 4, c(seq(mini + 1, maxi - 1, 3)), pos = 0, lwd = 0.1)
axis(side = 4, c(seq(mini + 1, maxi - 1, 3)), pos = 0, lwd = 2)
##  Curvas:
curve(f1, from = v[1], to = v[2], xlim = v, ylim = c(mini, maxi), lwd = 2,
bty = 'n', xaxt = 'n', yaxt = 'n', ylab = '', xlab = '',
main = 'Componentes da Inequação')
curve(f2, from = v[1], to = v[2], add = TRUE, col = 2, lwd = 2)
curve(g, from = v[1], to = v[2], add = TRUE, col = 3, lwd = 2)
##  Eixos:
arrows(x0 = v[1], x1 = v[2],
y0 = 0, y1 = 0, lwd = 2, length = 0.1)
arrows(x0 = 0, x1 = 0,
y0 = mini, y1 = maxi, lwd = 2, length = 0.1)
##  Comprimento da reta vertical que passa pelo ponto de intersecção:
const <- 1.5
minim <- min(f1(r), f2(r), g(r)) - const
maxim <- max(f1(r), f2(r), g(r)) + const
##  Reta vertical que passa pelo ponto de intersecção:
segments(x0 = r, x1 = r,
y0 = minim, y1 = maxim, lwd = 1)
##  Enumeração dos eixos:
axis(side = 1, c(seq(v[1] + 0.5, v[2] - 0.5, 1)),
hadj = -0.25, padj = -1, pos = 0)
axis(side = 4, c(seq(mini + 1, maxi - 1, 3)), pos = 0)
##  Curvas:
curve(f1, from = v[1], to = v[2], xlim = v, ylim = c(mini, maxi), lwd = 2,
bty = 'n', xaxt = 'n', yaxt = 'n', ylab = '', xlab = '',
main = 'Componentes da Inequação')
curve(f2, from = v[1], to = v[2], add = TRUE, col = 2, lwd = 2)
curve(g, from = v[1], to = v[2], add = TRUE, col = 3, lwd = 2)
##  Eixos:
arrows(x0 = v[1], x1 = v[2],
y0 = 0, y1 = 0, lwd = 2, length = 0.1)
arrows(x0 = 0, x1 = 0,
y0 = mini, y1 = maxi, lwd = 2, length = 0.1)
##  Comprimento da reta vertical que passa pelo ponto de intersecção:
const <- 1.5
minim <- min(f1(r), f2(r), g(r)) - const
maxim <- max(f1(r), f2(r), g(r)) + const
##  Reta vertical que passa pelo ponto de intersecção:
segments(x0 = r, x1 = r,
y0 = minim, y1 = maxim, lwd = 1)
##  Enumeração dos eixos:
axis(side = 1, c(seq(v[1] + 0.5, v[2] - 0.5, 1)),
hadj = -0.25, padj = -1, pos = 0, cex = 0.5)
##  Enumeração dos eixos:
axis(side = 1, c(seq(v[1] + 0.5, v[2] - 0.5, 1)),
hadj = -0.25, padj = -1, pos = 0, cex = 3)
##  Enumeração dos eixos:
axis(side = 1, c(seq(v[1] + 0.5, v[2] - 0.5, 1)),
hadj = -0.25, padj = -1, pos = 0, cex = 20)
##  Enumeração dos eixos:
axis(side = 1, c(seq(v[1] + 0.5, v[2] - 0.5, 1)),
hadj = -0.25, padj = -1, pos = 0, cex.axis = 20)
##  Enumeração dos eixos:
axis(side = 1, c(seq(v[1] + 0.5, v[2] - 0.5, 1)),
hadj = -0.25, padj = -1, pos = 0, cex.labels = 20)
##  Enumeração dos eixos:
axis(side = 1, c(seq(v[1] + 0.5, v[2] - 0.5, 1)),
hadj = -0.25, padj = -1, pos = 0, cex.lab = 20)
##  Enumeração dos eixos:
axis(side = 1, c(seq(v[1] + 0.5, v[2] - 0.5, 1)),
hadj = -0.25, padj = -1, pos = 0, cex.lab = 20)
##  Curvas:
curve(f1, from = v[1], to = v[2], xlim = v, ylim = c(mini, maxi), lwd = 2,
bty = 'n', xaxt = 'n', yaxt = 'n', ylab = '', xlab = '',
main = 'Componentes da Inequação')
curve(f2, from = v[1], to = v[2], add = TRUE, col = 2, lwd = 2)
curve(g, from = v[1], to = v[2], add = TRUE, col = 3, lwd = 2)
##  Eixos:
arrows(x0 = v[1], x1 = v[2],
y0 = 0, y1 = 0, lwd = 2, length = 0.1)
arrows(x0 = 0, x1 = 0,
y0 = mini, y1 = maxi, lwd = 2, length = 0.1)
##  Comprimento da reta vertical que passa pelo ponto de intersecção:
const <- 1.5
minim <- min(f1(r), f2(r), g(r)) - const
maxim <- max(f1(r), f2(r), g(r)) + const
##  Reta vertical que passa pelo ponto de intersecção:
segments(x0 = r, x1 = r,
y0 = minim, y1 = maxim, lwd = 1)
##  Enumeração dos eixos:
axis(side = 1, c(seq(v[1] + 0.5, v[2] - 0.5, 1)),
hadj = -0.25, padj = -1, pos = 0, cex.lab = 20)
##  Enumeração dos eixos:
axis(side = 1, c(seq(v[1] + 0.5, v[2] - 0.5, 1)),
hadj = -0.25, padj = -1, pos = 0, cex.lab = 0.1)
##  Enumeração dos eixos:
axis(side = 1, c(seq(v[1] + 0.5, v[2] - 0.5, 1)),
hadj = -0.25, padj = -1, pos = 0, cex.main = 0.1)
##  Enumeração dos eixos:
axis(side = 1, c(seq(v[1] + 0.5, v[2] - 0.5, 1)),
hadj = -0.25, padj = -1, pos = 0, cex.sub = 0.1)
##  Enumeração dos eixos:
axis(side = 1, c(seq(v[1] + 0.5, v[2] - 0.5, 1)),
hadj = -0.25, padj = -1, pos = 0, las = 0.1)
##  Enumeração dos eixos:
axis(side = 1, c(seq(v[1] + 0.5, v[2] - 0.5, 1)),
hadj = -0.25, padj = -1, pos = 0, las = 4)
##  Enumeração dos eixos:
axis(side = 1, c(seq(v[1] + 0.5, v[2] - 0.5, 1)),
hadj = -0.25, padj = -1, pos = 0, las = 3)
##  Enumeração dos eixos:
axis(side = 1, c(seq(v[1] + 0.5, v[2] - 0.5, 1)),
hadj = -0.25, padj = -1, pos = 0, las = 2)
##  Curvas:
curve(f1, from = v[1], to = v[2], xlim = v, ylim = c(mini, maxi), lwd = 2,
bty = 'n', xaxt = 'n', yaxt = 'n', ylab = '', xlab = '',
main = 'Componentes da Inequação')
curve(f2, from = v[1], to = v[2], add = TRUE, col = 2, lwd = 2)
curve(g, from = v[1], to = v[2], add = TRUE, col = 3, lwd = 2)
##  Eixos:
arrows(x0 = v[1], x1 = v[2],
y0 = 0, y1 = 0, lwd = 2, length = 0.1)
arrows(x0 = 0, x1 = 0,
y0 = mini, y1 = maxi, lwd = 2, length = 0.1)
##  Comprimento da reta vertical que passa pelo ponto de intersecção:
const <- 1.5
minim <- min(f1(r), f2(r), g(r)) - const
maxim <- max(f1(r), f2(r), g(r)) + const
##  Reta vertical que passa pelo ponto de intersecção:
segments(x0 = r, x1 = r,
y0 = minim, y1 = maxim, lwd = 1)
##  Enumeração dos eixos:
axis(side = 1, c(seq(v[1] + 0.5, v[2] - 0.5, 1)),
hadj = -0.25, padj = -1, pos = 0, las = 2)
##  Enumeração dos eixos:
axis(side = 1, c(seq(v[1] + 0.5, v[2] - 0.5, 1)),
hadj = -0.25, padj = -1, pos = 0, cex.axis=0.7, tck=-.01)
##  Enumeração dos eixos:
axis(side = 1, c(seq(v[1] + 0.5, v[2] - 0.5, 1)),
hadj = -0.25, padj = -1, pos = 0, tck=-.01)
##  Enumeração dos eixos:
axis(side = 1, c(seq(v[1] + 0.5, v[2] - 0.5, 1)),
hadj = -0.25, padj = -1, pos = 0, cex.axis = 0.7)
##  Curvas:
curve(f1, from = v[1], to = v[2], xlim = v, ylim = c(mini, maxi), lwd = 2,
bty = 'n', xaxt = 'n', yaxt = 'n', ylab = '', xlab = '',
main = 'Componentes da Inequação')
curve(f2, from = v[1], to = v[2], add = TRUE, col = 2, lwd = 2)
curve(g, from = v[1], to = v[2], add = TRUE, col = 3, lwd = 2)
##  Eixos:
arrows(x0 = v[1], x1 = v[2],
y0 = 0, y1 = 0, lwd = 2, length = 0.1)
arrows(x0 = 0, x1 = 0,
y0 = mini, y1 = maxi, lwd = 2, length = 0.1)
##  Comprimento da reta vertical que passa pelo ponto de intersecção:
const <- 1.5
minim <- min(f1(r), f2(r), g(r)) - const
maxim <- max(f1(r), f2(r), g(r)) + const
##  Reta vertical que passa pelo ponto de intersecção:
segments(x0 = r, x1 = r,
y0 = minim, y1 = maxim, lwd = 1)
##  Enumeração dos eixos:
axis(side = 1, c(seq(v[1] + 0.5, v[2] - 0.5, 1)),
hadj = -0.25, padj = -1, pos = 0, cex.axis = 0.7)
axis(side = 4, c(seq(mini + 1, maxi - 1, 3)), pos = 0, cex.axis = 0.7)
##  Enumeração dos eixos:
axis(side = 1, c(seq(v[1] + 0.5, v[2] - 0.5, 1)),
hadj = -0.25, padj = -2, pos = 0, cex.axis = 0.7)
axis(side = 4, c(seq(mini + 1, maxi - 1, 3)), padj = -2, pos = 0, cex.axis = 0.7)
##  Enumeração dos eixos:
axis(side = 1, c(seq(v[1] + 0.5, v[2] - 0.5, 1)),
hadj = -0.25, padj = -1.5, pos = 0, cex.axis = 0.7)
axis(side = 4, c(seq(mini + 1, maxi - 1, 3)), padj = -1, pos = 0, cex.axis = 0.7)
##  Para resolver a inequação pelo R consideraremos as seguintes expressões:
## 'f1(x) = 3x + 3' e 'f2(x) = x + 6'.
f1 <- function(x){
3*x + 3
}
f2 <- function(x){
x + 6
}
##  A desigualdade é 'f1(x) < f2(x)' logo 'f1(x) - f2(x) < 0'. Logo queremos os
## valores de x para os quais 'f1(x) - f2(x)' seja menor que zero.
##  Começaremos achando a raiz da expressão 'f1(x) - f2(x)'.
##  A função abaixo utiliza iterações para achar a raiz em um intervalo
## pré-determinado, utiliza-se aqui o intervalo (-10, 10) mas é possível inserir
## grandes intervalos a um certo custo de tempo computacional (neste caso
## razoável).
r <- uniroot(function(x){f1(x) - f2(x)}, c(-10, 10))$root
r
##  O resultado revela somente a raiz da função. No entanto queremos saber onde
## se localizam os valores positivos e negativos da função.
##  Chamaremos nessa etapa a expressão 'f1(x) - f2(x)' de 'g(x)'.
g <- function(x){
f1(x) - f2(x)
}
##  Sabemos que a raiz da função 'g(x)' é 1.5, logo basta verificarmos os
## valores ao redor da raiz.
x <- seq(from = r - 0.5, to = r + 0.5, by = 0.1)
data.frame(x, g(x))
##  Vetor para determinar a amplitude do eixo das abscissas:
v <- c(r - 2, r + 2)
##  Determina  a amplitude do eixo das ordenadas:
mini <- min(f1(v), f2(v), g(v))
maxi <- max(f1(v), f2(v), g(v))
##  Curvas:
curve(f1, from = v[1], to = v[2], xlim = v, ylim = c(mini, maxi), lwd = 2,
bty = 'n', xaxt = 'n', yaxt = 'n', ylab = '', xlab = '',
main = 'Componentes da Inequação')
curve(f2, from = v[1], to = v[2], add = TRUE, col = 2, lwd = 2)
curve(g, from = v[1], to = v[2], add = TRUE, col = 3, lwd = 2)
##  Eixos:
arrows(x0 = v[1], x1 = v[2],
y0 = 0, y1 = 0, lwd = 2, length = 0.1)
arrows(x0 = 0, x1 = 0,
y0 = mini, y1 = maxi, lwd = 2, length = 0.1)
##  Comprimento da reta vertical que passa pelo ponto de intersecção:
const <- 1.5
minim <- min(f1(r), f2(r), g(r)) - const
maxim <- max(f1(r), f2(r), g(r)) + const
##  Reta vertical que passa pelo ponto de intersecção:
segments(x0 = r, x1 = r,
y0 = minim, y1 = maxim, lwd = 1)
##  Enumeração dos eixos:
axis(side = 1, c(seq(v[1] + 0.5, v[2] - 0.5, 1)),
hadj = -1, padj = -1.5, pos = 0,  cex.axis = 0.7)
axis(side = 2, c(seq(mini + 1, maxi - 1, 2)),
padj = -1, pos = 0,  cex.axis = 0.7)
axis(side = 2, c(seq(mini + 1, maxi - 1, 2)),
padj = 1, pos = 0,  cex.axis = 0.7)
