plot(pontos, bty = 'n', xaxt = 'n', yaxt = 'n', ylab = '', xlab = '',
xlim = c(pontos[2, 1] - 2, pontos[4, 1] + 2), pch = 19, cex = 2)
## Eixo do sistema:
arrows(x0 = pontos[2, 1] - 2, x1 = pontos[4, 1] + 2,
y0 = 0, y1 = 0, lwd = 2)
pontos <- c(k*xy, xy)
pontos$x
################################################################################
## Cria um vetor dos valores a serem plotados:
xy <- c(x = 2, y = 3)
xy
xy$x
## Atribui nome às coordenadas
rownames(pontos) <- c("kx", "ky", "x", "y")
################################################################################
## Cria um vetor dos valores a serem plotados:
xy <- c(2, 3)
k <- -2
pontos <- c(k*xy, xy)
## Atribui 0 aos valores de y
pontos <- cbind(pontos, 0)
## Atribui nome às coordenadas
rownames(pontos) <- c("kx", "ky", "x", "y")
## Cria gráfico unidimensional:
plot(pontos, bty = 'n', xaxt = 'n', yaxt = 'n', ylab = '', xlab = '',
xlim = c(pontos[2, 1] - 2, pontos[4, 1] + 2), pch = 19, cex = 2)
## Eixo do sistema:
arrows(x0 = pontos[2, 1] - 2, x1 = pontos[4, 1] + 2,
y0 = 0, y1 = 0, lwd = 2)
pontos
## Retas de distância:
arrows(x0 = pontos[1, 1], x1 = c(0, pontos[3, 1]),
y0 = 0.3, y1 = 0.3,
angle = 90, code = 3, col = "red", lwd = 2, length = 0.1)
arrows(x0 = pontos[2, 1], x1 = c(0, pontos[4, 1]),
y0 = 0.6, y1 = 0.6,
angle = 90, code = 3, col = "red", lwd = 2, length = 0.1)
## Enumeração do eixo:
axis(side=1,seq(-7,4,1),pos=0)
## Legenda:
text(pontos,labels = rownames(pontos), pos = 3, offset = 1, font = 2)
text(y = 0, x = -1.5,
labels = "Gráfico Unidimensional para Avaliação das Desigualdades",
pos = 1, offset = 3, font = 2)
text(x = 1, y = 0.3, labels = 'oi')
text(x = 1, y = 0.4, labels = 'oi')
?text
text(x = pontos[1, 1]/2, y = 0.3, pos = 3)
text(x = pontos[1, 1]/2, labels = rownames(pontos)[1], y = 0.3, pos = 3)
## Cria gráfico unidimensional:
plot(pontos, bty = 'n', xaxt = 'n', yaxt = 'n', ylab = '', xlab = '',
xlim = c(pontos[2, 1] - 2, pontos[4, 1] + 2), pch = 19, cex = 2)
## Eixo do sistema:
arrows(x0 = pontos[2, 1] - 2, x1 = pontos[4, 1] + 2,
y0 = 0, y1 = 0, lwd = 2)
## Retas de distância:
arrows(x0 = pontos[1, 1], x1 = c(0, pontos[3, 1]),
y0 = 0.3, y1 = 0.3,
angle = 90, code = 3, col = "red", lwd = 2, length = 0.1)
arrows(x0 = pontos[2, 1], x1 = c(0, pontos[4, 1]),
y0 = 0.6, y1 = 0.6,
angle = 90, code = 3, col = "red", lwd = 2, length = 0.1)
## Enumeração do eixo:
axis(side=1,seq(-7,4,1),pos=0)
## Legenda:
text(pontos,labels = rownames(pontos), pos = 3, offset = 1, font = 2)
text(x = pontos[1, 1]/2, labels = rownames(pontos)[1], y = 0.3, pos = 3)
text(x = pontos[2, 1]/2, labels = rownames(pontos)[1], y = 0.6, pos = 3)
text(x = pontos[3, 1]/2, labels = rownames(pontos)[1], y = 0.3, pos = 3)
text(x = pontos[4, 1]/2, labels = rownames(pontos)[1], y = 0.6, pos = 3)
text(x = pontos[1, 1]/2, labels = rownames(pontos)[1], y = 0.3,
pos = 3, offset = 1)
text(x = pontos[1, 1]/2, labels = rownames(pontos)[1], y = 0.3,
pos = 3, offset = 1, font = 2)
################################################################################
## Cria um vetor dos valores a serem plotados:
xy <- c(2, 3)
k <- -2
pontos <- c(k*xy, xy)
## Atribui 0 aos valores de y
pontos <- cbind(pontos, 0)
## Atribui nome às coordenadas
rownames(pontos) <- c("kx", "ky", "x", "y")
## Cria gráfico unidimensional:
plot(pontos, bty = 'n', xaxt = 'n', yaxt = 'n', ylab = '', xlab = '',
xlim = c(pontos[2, 1] - 2, pontos[4, 1] + 2), pch = 19, cex = 2)
## Eixo do sistema:
arrows(x0 = pontos[2, 1] - 2, x1 = pontos[4, 1] + 2,
y0 = 0, y1 = 0, lwd = 2)
## Retas de distância:
arrows(x0 = pontos[1, 1], x1 = c(0, pontos[3, 1]),
y0 = 0.3, y1 = 0.3,
angle = 90, code = 3, col = "red", lwd = 2, length = 0.1)
arrows(x0 = pontos[2, 1], x1 = c(0, pontos[4, 1]),
y0 = 0.6, y1 = 0.6,
angle = 90, code = 3, col = "red", lwd = 2, length = 0.1)
## Enumeração do eixo:
axis(side=1,seq(-7,4,1),pos=0)
## Legenda:
text(pontos,labels = rownames(pontos), pos = 3, offset = 1, font = 2)
text(x = pontos[1, 1]/2, labels = rownames(pontos)[1], y = 0.3,
pos = 3, font = 2)
text(x = pontos[2, 1]/2, labels = rownames(pontos)[2], y = 0.6,
pos = 3, font = 2)
text(x = pontos[3, 1]/2, labels = rownames(pontos)[3], y = 0.3,
pos = 3, font = 2)
text(x = pontos[4, 1]/2, labels = rownames(pontos)[4], y = 0.6,
pos = 3, font = 2)
text(y = 0, x = (pontos[2, 1] + pontos[4, 1])/2,
labels = "Gráfico Unidimensional para Avaliação das Desigualdades",
pos = 1, offset = 3, font = 2)
opts_chunk$set(fig.align = "center")
opts_chunk$set
require(knitr)
opts_chunk$set(fig.align = "center")
## Cria gráfico unidimensional:
plot(pontos, bty = 'n', xaxt = 'n', yaxt = 'n', ylab = '', xlab = '',
xlim = c(pontos[2, 1] - 2, pontos[4, 1] + 2), pch = 19, cex = 2)
################################################################################
## Cria um vetor dos valores a serem plotados:
xy <- c(2, 3)
k <- -2
pontos <- c(k*xy, xy)
## Atribui 0 aos valores de y
pontos <- cbind(pontos, 0)
## Atribui nome às coordenadas
rownames(pontos) <- c("kx", "ky", "x", "y")
## Cria gráfico unidimensional:
plot(pontos, bty = 'n', xaxt = 'n', yaxt = 'n', ylab = '', xlab = '',
xlim = c(pontos[2, 1] - 2, pontos[4, 1] + 2), pch = 19, cex = 2)
## Eixo do sistema:
arrows(x0 = pontos[2, 1] - 2, x1 = pontos[4, 1] + 2,
y0 = 0, y1 = 0, lwd = 2)
## Cria gráfico unidimensional:
plot(pontos, bty = 'n', xaxt = 'n', yaxt = 'n', ylab = '', xlab = '',
ylim = c(-1, 1)
xlim = c(pontos[2, 1] - 2, pontos[4, 1] + 2), pch = 19, cex = 2)
## Cria gráfico unidimensional:
plot(pontos, bty = 'n', xaxt = 'n', yaxt = 'n', ylab = '', xlab = '',
ylim = c(-1, 1),
xlim = c(pontos[2, 1] - 2, pontos[4, 1] + 2), pch = 19, cex = 2)
oi <- function(){
3x+3
}
oi <- function(){
3x+3
}
oi <- function(x){
3x+3
}
oi <- function(x){
3*x+3
}
oi
plot(oi)
tchau <- function(y){
x + 6
}
plot(oi, tchau)
plot(oi, add = T)
plot(tchau)
tchau <- function(y){
y + 6
}
plot(tchau)
plot(oi, add = T)
plot(tchau)
plot(oi, add = T)
plot(tchau, add = T)
plot(oi, add = T)
plot(tchau, add = T)
plot(oi)
plot(tchau, add = T)
plot(oi, ylim = c(-1, 10))
plot(tchau, add = T)
plot(oi, ylim = c(-1, 10), xlim = (-1, 10))
plot(oi, ylim = c(-1, 10), xlim = c(-1, 10))
plot(tchau, add = T)
plot(oi, ylim = c(-1, 10), xlim = c(-1, 10))
plot(tchau, ylim = c(-1, 10), xlim = c(-1, 10), add = T)
oi == tchau
intersect(oi, tchau)
uniroot(oi, tchau)
?uniroot
uniroot(oi-tchau)
uniroot(oi-tchau, c(10,1e8))
uniroot(function(z)oi(z)-tchau(z), c(10,1e8))
uniroot(function(z){oi(z)-tchau(z)}, c(10,1e8))
uniroot(function(z){oi(z)-tchau(z)}, c(0,1e8))
##  Para resolver a inequação pelo R chamaremos 'f1(x) = 3x + 3' e
## 'f2(x) = x + 6':
f1 <- function(x){
3*x + 3
}
f2 <- function(x){
x + 6
}
##  A desigualdade é 'f1(x) < f2(x)' logo 'f1(x) - f2(x) < 0'. Chamaremos
## 'f1(x) - f2(x)' de 'g(x)'. logo queremos os valores de x para os quais 'g(x)'
## seja menor que zero.
g <- function(x){
f1(x) - f2(x)
}
uniroot(g(x), c(-10, 10))
##  A desigualdade é 'f1(x) < f2(x)' logo 'f1(x) - f2(x) < 0'. Chamaremos
## 'f1(x) - f2(x)' de 'g(x)'. logo queremos os valores de x para os quais 'g(x)'
## seja menor que zero.
g <- function(x){
f1() - f2()
}
uniroot(g(x), c(-10, 10))
uniroot(g, c(-10, 10))
uniroot(function(x){f1(x) - f2(x)}, c(-10, 10))
##  A desigualdade é 'f1(x) < f2(x)' logo 'f1(x) - f2(x) < 0'. Logo queremos os
## valores de x para os quais 'f1(x) - f2(x)' seja menor que zero.
uniroot(function(x){f1(x) - f2(x)}, c(-1, 1))
##  A desigualdade é 'f1(x) < f2(x)' logo 'f1(x) - f2(x) < 0'. Logo queremos os
## valores de x para os quais 'f1(x) - f2(x)' seja menor que zero.
uniroot(function(x){f1(x) - f2(x)}, c(-1, 1.6))
##  A desigualdade é 'f1(x) < f2(x)' logo 'f1(x) - f2(x) < 0'. Logo queremos os
## valores de x para os quais 'f1(x) - f2(x)' seja menor que zero.
uniroot(function(x){f1(x) - f2(x)}, c(-5, 5))
##  A desigualdade é 'f1(x) < f2(x)' logo 'f1(x) - f2(x) < 0'. Logo queremos os
## valores de x para os quais 'f1(x) - f2(x)' seja menor que zero.
uniroot(function(x){f1(x) - f2(x)}, c(0, 10))
uniroot(function(x){x}, c(0, 1))
uniroot(function(x){x}, c(-1, 1))
##  A desigualdade é 'f1(x) < f2(x)' logo 'f1(x) - f2(x) < 0'. Logo queremos os
## valores de x para os quais 'f1(x) - f2(x)' seja menor que zero.
uniroot(function(x){f1(x) - f2(x)}, c(-100, 100))
##  A desigualdade é 'f1(x) < f2(x)' logo 'f1(x) - f2(x) < 0'. Logo queremos os
## valores de x para os quais 'f1(x) - f2(x)' seja menor que zero.
uniroot(function(x){f1(x) - f2(x)}, c(-100000, 100000))
##  A desigualdade é 'f1(x) < f2(x)' logo 'f1(x) - f2(x) < 0'. Logo queremos os
## valores de x para os quais 'f1(x) - f2(x)' seja menor que zero.
uniroot(function(x){f1(x) - f2(x)}, c(-10, 10))
##  A desigualdade é 'f1(x) < f2(x)' logo 'f1(x) - f2(x) < 0'. Logo queremos os
## valores de x para os quais 'f1(x) - f2(x)' seja menor que zero.
##  Começaremos achando a raiz da expressão 'f1(x) - f2(x)'.
##  A função abaixo utiliza utiliza iterações para achar a raiz em um intervalo
## pré-determinado, utiliza-se aqui o intervalo (-10, 10) mas é possível inserir
## grandes intervalos a um certo custo de tempo computacional (neste caso
## razoável).
uniroot(function(x){f1(x) - f2(x)}, c(-10, 10))$root
##  A desigualdade é 'f1(x) < f2(x)' logo 'f1(x) - f2(x) < 0'. Logo queremos os
## valores de x para os quais 'f1(x) - f2(x)' seja menor que zero.
##  Começaremos achando a raiz da expressão 'f1(x) - f2(x)'.
##  A função abaixo utiliza utiliza iterações para achar a raiz em um intervalo
## pré-determinado, utiliza-se aqui o intervalo (-10, 10) mas é possível inserir
## grandes intervalos a um certo custo de tempo computacional (neste caso
## razoável).
uniroot(function(x){f1(x) - f2(x)}, c(-1000000000000000000, 10000000000000000))$root
##  O resultado revela somente a raiz da função. No entanto queremos saber onde
## se localizam os valores positivos e negativos da função.
##  Chamaremos nessa etapa a expressão 'f1(x) - f2(x)' de 'g(x)'.
g <- function(x){
f1(x) - f2(x)
}
?seq
##  Sabemos que a raiz da função 'g(x)' é 1.5, logo basta verificarmos os
## valores ao redor da raiz.
x <- seq(from = 1, to = 2, by = 0.1)
g(x)
names(g(x))
print(g(x), names = c(1,2,3,4,5,6,7,8,9,10))
print(g(x), names = c(1,2,3,4,5,6,7,8,9,10,11))
data.frame(x, g(x))
curve(f1,from=1e-3,to=1e8,log="xy")
curve(f1,from=1e-3,to=1e8)
curve(f1, from = 0, to = 10)
curve(f2,add=TRUE,col=2)
curve(f1, from = -10, to = 10)
curve(f2,add=TRUE,col=2)
curve(f1, from = -5, to = 5)
curve(f2,add=TRUE,col=2)
curve(f1, from = -3.5, to = 6.5)
curve(f2,add=TRUE,col=2)
curve(f1, from = -3.5, to = 6.5, lwd = 2)
curve(f2, add = TRUE, col = 2, lwd = 2)
curve(f1, from = -3.5, to = 6.5, lwd = 2, bty = 'n', xaxt = 'n', yaxt = 'n', ylab = '', xlab = '')
curve(f2, add = TRUE, col = 2, lwd = 2)
curve(g, add = TRUE, col = 3, lwd = 2)
## Eixos:
arrows(x0 = -3.5, x1 = 6.5,
y0 = 0, y1 = 0, lwd = 2)
arrows(x0 = 0, x1 = 0,
y0 = -7.5, y1 = 22.5)
arrows(x0 = 0, x1 = 0,
y0 = -7.5, y1 = 22.5, lwd = 2)
##  Curvas:
curve(f1, from = -3.5, to = 6.5, lwd = 2)
#      bty = 'n', xaxt = 'n', yaxt = 'n', ylab = '', xlab = '')
curve(f2, add = TRUE, col = 2, lwd = 2)
curve(g, add = TRUE, col = 3, lwd = 2)
## Eixos:
arrows(x0 = -3.5, x1 = 6.5,
y0 = 0, y1 = 0, lwd = 2)
arrows(x0 = 0, x1 = 0,
y0 = -7.5, y1 = 22.5, lwd = 2)
##  Curvas:
curve(f1, from = -3.5, to = 6.5, lwd = 2)
#      bty = 'n', xaxt = 'n', yaxt = 'n', ylab = '', xlab = '')
curve(f2, add = TRUE, col = 2, lwd = 2)
## Eixos:
arrows(x0 = -3.5, x1 = 6.5,
y0 = 0, y1 = 0, lwd = 2)
arrows(x0 = 0, x1 = 0,
y0 = -7.5, y1 = 22.5, lwd = 2)
arrows(x0 = 0, x1 = 0,
y0 = -7.5, y1 = 22.5, lwd = 2)
curve(g, add = TRUE, col = 3, lwd = 2)
##  Curvas:
curve(f1, from = -3.5, to = 6.5, lwd = 2,
bty = 'n', xaxt = 'n', yaxt = 'n', ylab = '', xlab = '')
curve(f2, add = TRUE, col = 2, lwd = 2)
curve(g, add = TRUE, col = 3, lwd = 2)
## Eixos:
arrows(x0 = -3.5, x1 = 6.5,
y0 = 0, y1 = 0, lwd = 2)
arrows(x0 = 0, x1 = 0,
y0 = -7.5, y1 = 22.5, lwd = 2)
##  Enumeração dos eixos:
axis(side = 1, seq(-3, 6, 1), pos = 0)
##  Enumeração dos eixos:
axis(side = 1, seq(-3, 6, 0.5), pos = 0)
##  Curvas:
curve(f1, from = -3.5, to = 6.5, lwd = 2,
bty = 'n', xaxt = 'n', yaxt = 'n', ylab = '', xlab = '')
curve(f2, add = TRUE, col = 2, lwd = 2)
curve(g, add = TRUE, col = 3, lwd = 2)
## Eixos:
arrows(x0 = -3.5, x1 = 6.5,
y0 = 0, y1 = 0, lwd = 2)
arrows(x0 = 0, x1 = 0,
y0 = -7.5, y1 = 22.5, lwd = 2)
##  Enumeração dos eixos:
axis(side = 1, seq(-3, 6, 0.5), pos = 0)
##  Curvas:
curve(f1, from = -3.5, to = 6.5, lwd = 2,
bty = 'n', xaxt = 'n', yaxt = 'n', ylab = '', xlab = '')
curve(f2, add = TRUE, col = 2, lwd = 2)
curve(g, add = TRUE, col = 3, lwd = 2)
## Eixos:
arrows(x0 = -3.5, x1 = 6.5,
y0 = 0, y1 = 0, lwd = 2)
arrows(x0 = 0, x1 = 0,
y0 = -7.5, y1 = 22.5, lwd = 2)
##  Enumeração dos eixos:
axis(side = 1, seq(-3, 6, 1), pos = 0)
?axis
axis(side = 1, seq(-7, 22, 1), pos = 1)
axis(side = 1, seq(-7, 22, 1), pos = 3)
axis(side = 0, seq(-7, 22, 1), pos = 0)
axis(side = 2, seq(-7, 22, 1), pos = 0)
##  Curvas:
curve(f1, from = -3.5, to = 6.5, lwd = 2,
bty = 'n', xaxt = 'n', yaxt = 'n', ylab = '', xlab = '')
curve(f2, add = TRUE, col = 2, lwd = 2)
curve(g, add = TRUE, col = 3, lwd = 2)
## Eixos:
arrows(x0 = -3.5, x1 = 6.5,
y0 = 0, y1 = 0, lwd = 2)
arrows(x0 = 0, x1 = 0,
y0 = -7.5, y1 = 22.5, lwd = 2)
##  Enumeração dos eixos:
axis(side = 1, seq(-3, 6, 1), pos = 0)
axis(side = 2, seq(-7, 22, 1), pos = 0)
##  Curvas:
curve(f1, from = -3.5, to = 6.5, lwd = 2,
bty = 'n', xaxt = 'n', yaxt = 'n', ylab = '', xlab = '')
curve(f2, add = TRUE, col = 2, lwd = 2)
curve(g, add = TRUE, col = 3, lwd = 2)
## Eixos:
arrows(x0 = -3.5, x1 = 6.5,
y0 = 0, y1 = 0, lwd = 2)
arrows(x0 = 0, x1 = 0,
y0 = -7.5, y1 = 22.5, lwd = 2)
axis(side = 2, seq(-6, 20, 2), pos = 0)
##  Enumeração dos eixos:
axis(side = 1, seq(-3, 6, 1), pos = 0)
##  Curvas:
curve(f1, from = -3.5, to = 6.5, lwd = 2,
bty = 'n', xaxt = 'n', yaxt = 'n', ylab = '', xlab = '',
main = 'oioi')
curve(f2, add = TRUE, col = 2, lwd = 2)
curve(g, add = TRUE, col = 3, lwd = 2)
## Eixos:
arrows(x0 = -3.5, x1 = 6.5,
y0 = 0, y1 = 0, lwd = 2)
arrows(x0 = 0, x1 = 0,
y0 = -7.5, y1 = 22.5, lwd = 2)
##  Enumeração dos eixos:
axis(side = 1, seq(-3, 6, 1), pos = 0)
axis(side = 2, seq(-6, 20, 2), pos = 0)
##  Curvas:
curve(f1, from = -3.5, to = 6.5, lwd = 2,
bty = 'n', xaxt = 'n', yaxt = 'n', ylab = '', xlab = '',
main = 'Componentes da Inequação')
curve(f2, add = TRUE, col = 2, lwd = 2)
curve(g, add = TRUE, col = 3, lwd = 2)
## Eixos:
arrows(x0 = -3.5, x1 = 6.5,
y0 = 0, y1 = 0, lwd = 2)
arrows(x0 = 0, x1 = 0,
y0 = -7.5, y1 = 22.5, lwd = 2)
##  Enumeração dos eixos:
axis(side = 1, seq(-3, 6, 1), pos = 0)
axis(side = 2, seq(-6, 20, 2), pos = 0)
## Legenda
legend(-3, 18, 'oioi')
## Legenda
?legend
legend(-3, 18, c('f1(x)', 'f2(x)', 'g(x)'), col = c(1, 2, 3))
legend(-3, 18, col = c(1, 2, 3), c('f1(x)', 'f2(x)', 'g(x)'))
legend(-3, 18, col = c(1, 2, 3), c('f1(x', 'f2(x)', 'g(x)'))
legend(-3, 18, col = c(1, 2, 3), c('f1(x)', 'f2(x)', 'g(x)'), lwd = 2)
## Legenda
legend(-3, 18, col = c(1, 2, 3), c('f1(x)', 'f2(x)', 'g(x)'), lwd = 2, font = 2)
?legend
## Legenda
legend(-3, 18, col = c(1, 2, 3), c('f1(x)', 'f2(x)', 'g(x)'), lwd = 2, text.font = 2)
abline(v = 1.6)
##  Ponto de intersecção:
abline(v = 1.5, lwd = 2, ylim = c(-6, 20))
?abline
##  Curvas:
curve(f1, from = -3.5, to = 6.5, lwd = 2,
bty = 'n', xaxt = 'n', yaxt = 'n', ylab = '', xlab = '',
main = 'Componentes da Inequação')
curve(f2, add = TRUE, col = 2, lwd = 2)
curve(g, add = TRUE, col = 3, lwd = 2)
##  Eixos:
arrows(x0 = -3.5, x1 = 6.5,
y0 = 0, y1 = 0, lwd = 2)
arrows(x0 = 0, x1 = 0,
y0 = -7.5, y1 = 22.5, lwd = 2)
##  Ponto de intersecção:
abline(v = 1.5, ylim = c(-6, 20), lwd = 2)
##  Curvas:
curve(f1, from = -3.5, to = 6.5, lwd = 2,
bty = 'n', xaxt = 'n', yaxt = 'n', ylab = '', xlab = '',
main = 'Componentes da Inequação')
curve(f2, add = TRUE, col = 2, lwd = 2)
curve(g, add = TRUE, col = 3, lwd = 2)
##  Eixos:
arrows(x0 = -3.5, x1 = 6.5,
y0 = 0, y1 = 0, lwd = 2)
arrows(x0 = 0, x1 = 0,
y0 = -7.5, y1 = 22.5, lwd = 2)
##  Ponto de intersecção:
abline(v = 1.5, ylim = c(-2, 2), lwd = 2)
##  Ponto de intersecção:
abline(v = 1.5, ylim = c(-2, 2), lwd = 2)
##  Curvas:
curve(f1, from = -3.5, to = 6.5, lwd = 2,
bty = 'n', xaxt = 'n', yaxt = 'n', ylab = '', xlab = '',
main = 'Componentes da Inequação')
curve(f2, add = TRUE, col = 2, lwd = 2)
curve(g, add = TRUE, col = 3, lwd = 2)
##  Eixos:
arrows(x0 = -3.5, x1 = 6.5,
y0 = 0, y1 = 0, lwd = 2)
arrows(x0 = 0, x1 = 0,
y0 = -7.5, y1 = 22.5, lwd = 2)
##  Enumeração dos eixos:
axis(side = 1, seq(-3, 6, 1), pos = 0)
axis(side = 2, seq(-6, 20, 2), pos = 0)
##  Curvas:
curve(f1, from = -3.5, to = 6.5, lwd = 2,
bty = 'n', xaxt = 'n', yaxt = 'n', ylab = '', xlab = '',
main = 'Componentes da Inequação')
curve(f2, add = TRUE, col = 2, lwd = 2)
curve(g, add = TRUE, col = 3, lwd = 2)
##  Eixos:
arrows(x0 = -3.5, x1 = 6.5,
y0 = 0, y1 = 0, lwd = 2)
arrows(x0 = 0, x1 = 0,
y0 = -7.5, y1 = 22.5, lwd = 2)
##  Ponto de intersecção:
segment(v = 1.5, ylim = c(-2, 2), lwd = 2)
##  Enumeração dos eixos:
axis(side = 1, c(seq(-3, -1, 1), seq(1, 6, 1)), pos = 0)
axis(side = 2, c(seq(-6, -2, 2), seq(2, 20, 2)), pos = 0)
##  Legenda
legend(-3, 18, col = c(1, 2, 3), c('f1(x)', 'f2(x)', 'g(x)'),
lwd = 2, text.font = 2)
##  Ponto de intersecção:
segments(v = 1.5, ylim = c(-2, 2), lwd = 2)
?segments
##  Ponto de intersecção:
segments(x0 = 1.5, x1 = 1.5,
y0 = -6, y1 = 20, lwd = 2)
##  Curvas:
curve(f1, from = -3.5, to = 6.5, lwd = 2,
bty = 'n', xaxt = 'n', yaxt = 'n', ylab = '', xlab = '',
main = 'Componentes da Inequação')
curve(f2, add = TRUE, col = 2, lwd = 2)
curve(g, add = TRUE, col = 3, lwd = 2)
##  Eixos:
arrows(x0 = -3.5, x1 = 6.5,
y0 = 0, y1 = 0, lwd = 2)
arrows(x0 = 0, x1 = 0,
y0 = -7.5, y1 = 22.5, lwd = 2)
##  Ponto de intersecção:
segments(x0 = 1.5, x1 = 1.5,
y0 = -6, y1 = 14, lwd = 1)
##  Enumeração dos eixos:
axis(side = 1, c(seq(-3, -1, 1), seq(1, 6, 1)), pos = 0)
axis(side = 2, c(seq(-6, -2, 2), seq(2, 20, 2)), pos = 0)
##  Legenda
legend(-3, 18, col = c(1, 2, 3), c('f1(x)', 'f2(x)', 'g(x)'),
lwd = 2, text.font = 2)
